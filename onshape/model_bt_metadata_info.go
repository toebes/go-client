/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTMetadataInfo Metadata associated with a document or portion there of
type BTMetadataInfo struct {
	Next *string `json:"next,omitempty"`
	Prev *string `json:"prev,omitempty"`
	Href *string `json:"href,omitempty"`
	Items *[]BTMetadataInfoItems `json:"items,omitempty"`
}

// NewBTMetadataInfo instantiates a new BTMetadataInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTMetadataInfo() *BTMetadataInfo {
	this := BTMetadataInfo{}
	return &this
}

// NewBTMetadataInfoWithDefaults instantiates a new BTMetadataInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTMetadataInfoWithDefaults() *BTMetadataInfo {
	this := BTMetadataInfo{}
	return &this
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *BTMetadataInfo) GetNext() string {
	if o == nil || o.Next == nil {
		var ret string
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMetadataInfo) GetNextOk() (*string, bool) {
	if o == nil || o.Next == nil {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *BTMetadataInfo) HasNext() bool {
	if o != nil && o.Next != nil {
		return true
	}

	return false
}

// SetNext gets a reference to the given string and assigns it to the Next field.
func (o *BTMetadataInfo) SetNext(v string) {
	o.Next = &v
}

// GetPrev returns the Prev field value if set, zero value otherwise.
func (o *BTMetadataInfo) GetPrev() string {
	if o == nil || o.Prev == nil {
		var ret string
		return ret
	}
	return *o.Prev
}

// GetPrevOk returns a tuple with the Prev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMetadataInfo) GetPrevOk() (*string, bool) {
	if o == nil || o.Prev == nil {
		return nil, false
	}
	return o.Prev, true
}

// HasPrev returns a boolean if a field has been set.
func (o *BTMetadataInfo) HasPrev() bool {
	if o != nil && o.Prev != nil {
		return true
	}

	return false
}

// SetPrev gets a reference to the given string and assigns it to the Prev field.
func (o *BTMetadataInfo) SetPrev(v string) {
	o.Prev = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *BTMetadataInfo) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMetadataInfo) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *BTMetadataInfo) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *BTMetadataInfo) SetHref(v string) {
	o.Href = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *BTMetadataInfo) GetItems() []BTMetadataInfoItems {
	if o == nil || o.Items == nil {
		var ret []BTMetadataInfoItems
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMetadataInfo) GetItemsOk() (*[]BTMetadataInfoItems, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *BTMetadataInfo) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []BTMetadataInfoItems and assigns it to the Items field.
func (o *BTMetadataInfo) SetItems(v []BTMetadataInfoItems) {
	o.Items = &v
}

func (o BTMetadataInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Next != nil {
		toSerialize["next"] = o.Next
	}
	if o.Prev != nil {
		toSerialize["prev"] = o.Prev
	}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableBTMetadataInfo struct {
	value *BTMetadataInfo
	isSet bool
}

func (v NullableBTMetadataInfo) Get() *BTMetadataInfo {
	return v.value
}

func (v *NullableBTMetadataInfo) Set(val *BTMetadataInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBTMetadataInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBTMetadataInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTMetadataInfo(val *BTMetadataInfo) *NullableBTMetadataInfo {
	return &NullableBTMetadataInfo{value: val, isSet: true}
}

func (v NullableBTMetadataInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTMetadataInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
