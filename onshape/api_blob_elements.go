/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"os"
)

// Linger please
var (
	_ _context.Context
)

// BlobElementsApiService BlobElementsApi service
type BlobElementsApiService service

type apiCreateBlobTranslationRequest struct {
	ctx _context.Context
	apiService *BlobElementsApiService
	did string
	wv string
	wvid string
	eid string
	bTTranslateFormatParams *BTTranslateFormatParams
}


func (r apiCreateBlobTranslationRequest) BTTranslateFormatParams(bTTranslateFormatParams BTTranslateFormatParams) apiCreateBlobTranslationRequest {
	r.bTTranslateFormatParams = &bTTranslateFormatParams
	return r
}

/*
CreateBlobTranslation Create Translation.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did
 * @param wv
 * @param wvid
 * @param eid
@return apiCreateBlobTranslationRequest
*/
func (a *BlobElementsApiService) CreateBlobTranslation(ctx _context.Context, did string, wv string, wvid string, eid string) apiCreateBlobTranslationRequest {
	return apiCreateBlobTranslationRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wv: wv,
		wvid: wvid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTTranslationRequestInfo
*/
func (r apiCreateBlobTranslationRequest) Execute() (BTTranslationRequestInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTTranslationRequestInfo
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "BlobElementsApiService.CreateBlobTranslation")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/blobelements/d/{did}/{wv}/{wvid}/e/{eid}/translations"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wv"+"}", _neturl.QueryEscape(parameterToString(r.wv, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvid"+"}", _neturl.QueryEscape(parameterToString(r.wvid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
	
	if r.bTTranslateFormatParams == nil {
		return localVarReturnValue, nil, reportError("bTTranslateFormatParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bTTranslateFormatParams
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTTranslationRequestInfo
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiDownloadFileWorkspaceRequest struct {
	ctx _context.Context
	apiService *BlobElementsApiService
	did string
	wid string
	eid string
	contentDisposition *string
	ifNoneMatch *string
	linkDocumentId *string
}


func (r apiDownloadFileWorkspaceRequest) ContentDisposition(contentDisposition string) apiDownloadFileWorkspaceRequest {
	r.contentDisposition = &contentDisposition
	return r
}

func (r apiDownloadFileWorkspaceRequest) IfNoneMatch(ifNoneMatch string) apiDownloadFileWorkspaceRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

func (r apiDownloadFileWorkspaceRequest) LinkDocumentId(linkDocumentId string) apiDownloadFileWorkspaceRequest {
	r.linkDocumentId = &linkDocumentId
	return r
}

/*
DownloadFileWorkspace Download File From Blob Element.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did
 * @param wid
 * @param eid
@return apiDownloadFileWorkspaceRequest
*/
func (a *BlobElementsApiService) DownloadFileWorkspace(ctx _context.Context, did string, wid string, eid string) apiDownloadFileWorkspaceRequest {
	return apiDownloadFileWorkspaceRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wid: wid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return *os.File
*/
func (r apiDownloadFileWorkspaceRequest) Execute() (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "BlobElementsApiService.DownloadFileWorkspace")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/blobelements/d/{did}/w/{wid}/e/{eid}"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wid"+"}", _neturl.QueryEscape(parameterToString(r.wid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
			
	if r.contentDisposition != nil {
		localVarQueryParams.Add("contentDisposition", parameterToString(*r.contentDisposition, ""))
	}
	if r.linkDocumentId != nil {
		localVarQueryParams.Add("linkDocumentId", parameterToString(*r.linkDocumentId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifNoneMatch != nil {
		localVarHeaderParams["If-None-Match"] = parameterToString(*r.ifNoneMatch, "")
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiUpdateUnitsRequest struct {
	ctx _context.Context
	apiService *BlobElementsApiService
	did string
	eid string
	wid string
	bTUpdateMeshUnitsParams *BTUpdateMeshUnitsParams
}


func (r apiUpdateUnitsRequest) BTUpdateMeshUnitsParams(bTUpdateMeshUnitsParams BTUpdateMeshUnitsParams) apiUpdateUnitsRequest {
	r.bTUpdateMeshUnitsParams = &bTUpdateMeshUnitsParams
	return r
}

/*
UpdateUnits Update Mesh Units.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did
 * @param eid
 * @param wid
@return apiUpdateUnitsRequest
*/
func (a *BlobElementsApiService) UpdateUnits(ctx _context.Context, did string, eid string, wid string) apiUpdateUnitsRequest {
	return apiUpdateUnitsRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		eid: eid,
		wid: wid,
	}
}

/*
Execute executes the request
 @return BTDocumentElementProcessingInfo
*/
func (r apiUpdateUnitsRequest) Execute() (BTDocumentElementProcessingInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTDocumentElementProcessingInfo
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "BlobElementsApiService.UpdateUnits")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/blobelements/d/{did}/w/{wid}/e/{eid}/units"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wid"+"}", _neturl.QueryEscape(parameterToString(r.wid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
	if r.bTUpdateMeshUnitsParams == nil {
		return localVarReturnValue, nil, reportError("bTUpdateMeshUnitsParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bTUpdateMeshUnitsParams
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTDocumentElementProcessingInfo
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiUploadFileCreateElementRequest struct {
	ctx _context.Context
	apiService *BlobElementsApiService
	did string
	wid string
	allowFaultyParts *bool
	createComposite *bool
	createDrawingIfPossible *bool
	encodedFilename *string
	extractAssemblyHierarchy *bool
	file **os.File
	fileBodyWithDetails *FormDataBodyPart
	fileContentLength *int64
	fileDetail *FormDataContentDisposition
	flattenAssemblies *bool
	formatName *string
	isyAxisIsUp *bool
	joinAdjacentSurfaces *bool
	locationElementId *string
	locationGroupId *string
	locationPosition *int32
	notifyUser *bool
	ownerId *string
	ownerType *string
	parentId *string
	projectId *string
	public *bool
	splitAssembliesIntoMultipleDocuments *bool
	storeInDocument *bool
	translate *bool
	unit *string
	uploadId *string
	versionString *string
}


func (r apiUploadFileCreateElementRequest) AllowFaultyParts(allowFaultyParts bool) apiUploadFileCreateElementRequest {
	r.allowFaultyParts = &allowFaultyParts
	return r
}

func (r apiUploadFileCreateElementRequest) CreateComposite(createComposite bool) apiUploadFileCreateElementRequest {
	r.createComposite = &createComposite
	return r
}

func (r apiUploadFileCreateElementRequest) CreateDrawingIfPossible(createDrawingIfPossible bool) apiUploadFileCreateElementRequest {
	r.createDrawingIfPossible = &createDrawingIfPossible
	return r
}

func (r apiUploadFileCreateElementRequest) EncodedFilename(encodedFilename string) apiUploadFileCreateElementRequest {
	r.encodedFilename = &encodedFilename
	return r
}

func (r apiUploadFileCreateElementRequest) ExtractAssemblyHierarchy(extractAssemblyHierarchy bool) apiUploadFileCreateElementRequest {
	r.extractAssemblyHierarchy = &extractAssemblyHierarchy
	return r
}

func (r apiUploadFileCreateElementRequest) File(file *os.File) apiUploadFileCreateElementRequest {
	r.file = &file
	return r
}

func (r apiUploadFileCreateElementRequest) FileBodyWithDetails(fileBodyWithDetails FormDataBodyPart) apiUploadFileCreateElementRequest {
	r.fileBodyWithDetails = &fileBodyWithDetails
	return r
}

func (r apiUploadFileCreateElementRequest) FileContentLength(fileContentLength int64) apiUploadFileCreateElementRequest {
	r.fileContentLength = &fileContentLength
	return r
}

func (r apiUploadFileCreateElementRequest) FileDetail(fileDetail FormDataContentDisposition) apiUploadFileCreateElementRequest {
	r.fileDetail = &fileDetail
	return r
}

func (r apiUploadFileCreateElementRequest) FlattenAssemblies(flattenAssemblies bool) apiUploadFileCreateElementRequest {
	r.flattenAssemblies = &flattenAssemblies
	return r
}

func (r apiUploadFileCreateElementRequest) FormatName(formatName string) apiUploadFileCreateElementRequest {
	r.formatName = &formatName
	return r
}

func (r apiUploadFileCreateElementRequest) IsyAxisIsUp(isyAxisIsUp bool) apiUploadFileCreateElementRequest {
	r.isyAxisIsUp = &isyAxisIsUp
	return r
}

func (r apiUploadFileCreateElementRequest) JoinAdjacentSurfaces(joinAdjacentSurfaces bool) apiUploadFileCreateElementRequest {
	r.joinAdjacentSurfaces = &joinAdjacentSurfaces
	return r
}

func (r apiUploadFileCreateElementRequest) LocationElementId(locationElementId string) apiUploadFileCreateElementRequest {
	r.locationElementId = &locationElementId
	return r
}

func (r apiUploadFileCreateElementRequest) LocationGroupId(locationGroupId string) apiUploadFileCreateElementRequest {
	r.locationGroupId = &locationGroupId
	return r
}

func (r apiUploadFileCreateElementRequest) LocationPosition(locationPosition int32) apiUploadFileCreateElementRequest {
	r.locationPosition = &locationPosition
	return r
}

func (r apiUploadFileCreateElementRequest) NotifyUser(notifyUser bool) apiUploadFileCreateElementRequest {
	r.notifyUser = &notifyUser
	return r
}

func (r apiUploadFileCreateElementRequest) OwnerId(ownerId string) apiUploadFileCreateElementRequest {
	r.ownerId = &ownerId
	return r
}

func (r apiUploadFileCreateElementRequest) OwnerType(ownerType string) apiUploadFileCreateElementRequest {
	r.ownerType = &ownerType
	return r
}

func (r apiUploadFileCreateElementRequest) ParentId(parentId string) apiUploadFileCreateElementRequest {
	r.parentId = &parentId
	return r
}

func (r apiUploadFileCreateElementRequest) ProjectId(projectId string) apiUploadFileCreateElementRequest {
	r.projectId = &projectId
	return r
}

func (r apiUploadFileCreateElementRequest) Public(public bool) apiUploadFileCreateElementRequest {
	r.public = &public
	return r
}

func (r apiUploadFileCreateElementRequest) SplitAssembliesIntoMultipleDocuments(splitAssembliesIntoMultipleDocuments bool) apiUploadFileCreateElementRequest {
	r.splitAssembliesIntoMultipleDocuments = &splitAssembliesIntoMultipleDocuments
	return r
}

func (r apiUploadFileCreateElementRequest) StoreInDocument(storeInDocument bool) apiUploadFileCreateElementRequest {
	r.storeInDocument = &storeInDocument
	return r
}

func (r apiUploadFileCreateElementRequest) Translate(translate bool) apiUploadFileCreateElementRequest {
	r.translate = &translate
	return r
}

func (r apiUploadFileCreateElementRequest) Unit(unit string) apiUploadFileCreateElementRequest {
	r.unit = &unit
	return r
}

func (r apiUploadFileCreateElementRequest) UploadId(uploadId string) apiUploadFileCreateElementRequest {
	r.uploadId = &uploadId
	return r
}

func (r apiUploadFileCreateElementRequest) VersionString(versionString string) apiUploadFileCreateElementRequest {
	r.versionString = &versionString
	return r
}

/*
UploadFileCreateElement Upload file to new element.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did
 * @param wid
@return apiUploadFileCreateElementRequest
*/
func (a *BlobElementsApiService) UploadFileCreateElement(ctx _context.Context, did string, wid string) apiUploadFileCreateElementRequest {
	return apiUploadFileCreateElementRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wid: wid,
	}
}

/*
Execute executes the request
 @return BTDocumentElementProcessingInfo
*/
func (r apiUploadFileCreateElementRequest) Execute() (BTDocumentElementProcessingInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTDocumentElementProcessingInfo
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "BlobElementsApiService.UploadFileCreateElement")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/blobelements/d/{did}/w/{wid}"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wid"+"}", _neturl.QueryEscape(parameterToString(r.wid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
																												
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.allowFaultyParts != nil {
		localVarFormParams.Add("allowFaultyParts", parameterToString(*r.allowFaultyParts, ""))
	}
	if r.createComposite != nil {
		localVarFormParams.Add("createComposite", parameterToString(*r.createComposite, ""))
	}
	if r.createDrawingIfPossible != nil {
		localVarFormParams.Add("createDrawingIfPossible", parameterToString(*r.createDrawingIfPossible, ""))
	}
	if r.encodedFilename != nil {
		localVarFormParams.Add("encodedFilename", parameterToString(*r.encodedFilename, ""))
	}
	if r.extractAssemblyHierarchy != nil {
		localVarFormParams.Add("extractAssemblyHierarchy", parameterToString(*r.extractAssemblyHierarchy, ""))
	}
	localVarFormFileName = "file"
	var localVarFile *os.File
	if r.file != nil {
		localVarFile = *r.file
	}
	if localVarFile != nil {
		fbs, _ := _ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if r.fileBodyWithDetails != nil {
		paramJson, err := parameterToJson(*r.fileBodyWithDetails)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("fileBodyWithDetails", paramJson)
	}
	if r.fileContentLength != nil {
		localVarFormParams.Add("fileContentLength", parameterToString(*r.fileContentLength, ""))
	}
	if r.fileDetail != nil {
		paramJson, err := parameterToJson(*r.fileDetail)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("fileDetail", paramJson)
	}
	if r.flattenAssemblies != nil {
		localVarFormParams.Add("flattenAssemblies", parameterToString(*r.flattenAssemblies, ""))
	}
	if r.formatName != nil {
		localVarFormParams.Add("formatName", parameterToString(*r.formatName, ""))
	}
	if r.isyAxisIsUp != nil {
		localVarFormParams.Add("isyAxisIsUp", parameterToString(*r.isyAxisIsUp, ""))
	}
	if r.joinAdjacentSurfaces != nil {
		localVarFormParams.Add("joinAdjacentSurfaces", parameterToString(*r.joinAdjacentSurfaces, ""))
	}
	if r.locationElementId != nil {
		localVarFormParams.Add("locationElementId", parameterToString(*r.locationElementId, ""))
	}
	if r.locationGroupId != nil {
		localVarFormParams.Add("locationGroupId", parameterToString(*r.locationGroupId, ""))
	}
	if r.locationPosition != nil {
		localVarFormParams.Add("locationPosition", parameterToString(*r.locationPosition, ""))
	}
	if r.notifyUser != nil {
		localVarFormParams.Add("notifyUser", parameterToString(*r.notifyUser, ""))
	}
	if r.ownerId != nil {
		localVarFormParams.Add("ownerId", parameterToString(*r.ownerId, ""))
	}
	if r.ownerType != nil {
		localVarFormParams.Add("ownerType", parameterToString(*r.ownerType, ""))
	}
	if r.parentId != nil {
		localVarFormParams.Add("parentId", parameterToString(*r.parentId, ""))
	}
	if r.projectId != nil {
		localVarFormParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.public != nil {
		localVarFormParams.Add("public", parameterToString(*r.public, ""))
	}
	if r.splitAssembliesIntoMultipleDocuments != nil {
		localVarFormParams.Add("splitAssembliesIntoMultipleDocuments", parameterToString(*r.splitAssembliesIntoMultipleDocuments, ""))
	}
	if r.storeInDocument != nil {
		localVarFormParams.Add("storeInDocument", parameterToString(*r.storeInDocument, ""))
	}
	if r.translate != nil {
		localVarFormParams.Add("translate", parameterToString(*r.translate, ""))
	}
	if r.unit != nil {
		localVarFormParams.Add("unit", parameterToString(*r.unit, ""))
	}
	if r.uploadId != nil {
		localVarFormParams.Add("uploadId", parameterToString(*r.uploadId, ""))
	}
	if r.versionString != nil {
		localVarFormParams.Add("versionString", parameterToString(*r.versionString, ""))
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTDocumentElementProcessingInfo
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiUploadFileUpdateElementRequest struct {
	ctx _context.Context
	apiService *BlobElementsApiService
	did string
	eid string
	wid string
	parentChangeId *string
}


func (r apiUploadFileUpdateElementRequest) ParentChangeId(parentChangeId string) apiUploadFileUpdateElementRequest {
	r.parentChangeId = &parentChangeId
	return r
}

/*
UploadFileUpdateElement Update Blob Element.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did
 * @param eid
 * @param wid
@return apiUploadFileUpdateElementRequest
*/
func (a *BlobElementsApiService) UploadFileUpdateElement(ctx _context.Context, did string, eid string, wid string) apiUploadFileUpdateElementRequest {
	return apiUploadFileUpdateElementRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		eid: eid,
		wid: wid,
	}
}

/*
Execute executes the request
 @return BTDocumentElementProcessingInfo
*/
func (r apiUploadFileUpdateElementRequest) Execute() (BTDocumentElementProcessingInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTDocumentElementProcessingInfo
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "BlobElementsApiService.UploadFileUpdateElement")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/blobelements/d/{did}/w/{wid}/e/{eid}"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wid"+"}", _neturl.QueryEscape(parameterToString(r.wid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
	if r.parentChangeId != nil {
		localVarQueryParams.Add("parentChangeId", parameterToString(*r.parentChangeId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTDocumentElementProcessingInfo
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
